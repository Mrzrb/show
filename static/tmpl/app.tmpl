<!DOCTYPE html>
	<head>
		<link rel="stylesheet" href="/assets/css/reveal@4.1.0.css">
		<link rel="stylesheet" href="/assets/css/notify.css">
		<link rel="stylesheet" href="/assets/css/themes/moon@4.1.0.css">
		<link rel="stylesheet" href="/assets/css/themes/zenburn@4.1.0.css">
	</head>
	<body>
		<div class="reveal">
			<div class="slides">
                <section data-markdown data-trim 
                    data-noescape data-separator="^\^--" data-transition="convex"
                    data-auto-animate data-separator-notes="^Note:"
                    data-separator-vertical="^\^\|\|">
                        <script type="text/template" data-trim data-noescape>
                        {{.md}}
                        </script>
                </section>
            </div>
        </div>
		<script src="/assets/js/reveal@4.1.0.js"></script>
		<script src="/assets/js/notify/notify.js"></script>
		<script src="/assets/js/reveal-markdown@4.1.0.js"></script>
		<script src="/assets/js/plugin/zoom@4.1.0.js"></script>
		<script src="/assets/js/plugin/search@4.1.0.js"></script>
		<script src="/assets/js/plugin/highlight@4.1.0.js"></script>
		<script src="/assets/js/plugin/note@4.1.0.js"></script>
		<script>
        Reveal.initialize({
            plugins: [ RevealMarkdown, RevealHighlight, RevealSearch, RevealNotes ],
            slideNumber: true,
            center: false,
            markdown: {
                smartypants: true
            }
        });

    const actionList = {
      broadcast: (v) => {
          Notiflix.Notify.Success(`${v.data.name}提问了: ${v.data.question}`);
      },
    };
    const handleBlobData = async (b) => {
      if (b.text) {
        return await b
          .text()
          .then((v) => {
            return JSON.parse(v);
          })
          .catch((r) => {
            console.warn(r);
          });
      }
    };
    const ws = new WebSocket("ws://127.0.0.1:8081");
    ws.onmessage = async (evt) => {
      const data= evt.data;
      const d = await handleBlobData(data);
      if (!d) {
        return;
      }
      const fn = actionList[d.action];
      fn && fn(d);
    };
		</script>
	</body>
</html>

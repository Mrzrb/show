{"version":3,"sources":["question/QuestionCard.tsx","question/Question.tsx","ask/Ask.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Meta","Card","QuestionCard","props","name","question","bordered","actions","SettingOutlined","LikeOutlined","avatar","src","title","description","Question","useState","questions","setQuestions","useEffect","url","window","location","ws","WebSocket","hostname","onmessage","evt","a","data","handleBlobData","d","fn","actionList","action","onopen","this","send","JSON","stringify","broadcast","v","state","prevState","getall","questionArr","newQuestions","forEach","desc","b","text","then","parse","catch","r","console","warn","questionCard","map","to","direction","style","width","Ask","className","onFinish","log","createReq","handleSubmit","username","align","Item","marginTop","rules","required","message","prefix","UserOutlined","placeholder","LockOutlined","type","htmlType","Header","Layout","Content","App","basename","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAIQA,EAASC,IAATD,KAyBOE,EAlBmC,SAACC,GAAW,IACpDC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,SACd,OACE,cAAC,IAAD,CACEC,UAAU,EACVC,QAAS,CAAC,cAACC,EAAA,EAAD,GAAqB,WAAc,cAACC,EAAA,EAAD,GAAkB,SAFjE,SAIE,cAACT,EAAD,CACEU,OACE,cAAC,IAAD,CAAQC,IAAI,qEAEdC,MAAOR,EACPS,YAAaR,O,iBCwENS,EA9EgB,WAAO,IAAD,EACDC,qBADC,mBAC5BC,EAD4B,KACjBC,EADiB,KAGnCC,qBAAU,WACR,IAAMC,EAAMC,OAAOC,SACbC,EAAK,IAAIC,UAAJ,eAAsBJ,EAAIK,SAA1B,UACXF,EAAGG,UAAH,uCAAe,WAAOC,GAAP,mBAAAC,EAAA,6DACPC,EAAaF,EAAIE,KADV,SAEUC,EAAeD,GAFzB,UAEPE,EAFO,yDAMPC,EAAMC,EAAmBF,EAAEG,UAC3BF,EAAGD,GAPI,2CAAf,sDASAR,EAAGY,OAAS,SAAUR,GAIpBS,KAAKC,KAAKC,KAAKC,UAHS,CACtBL,OAAQ,aAIZ,IAAMD,EAAa,CACjBO,UAAW,SAACC,GACVvB,GAAa,SAACwB,GACZ,IACMC,EAAYD,EAClB,MAAO,CACLzB,UAAU,CAHFwB,EAAEZ,MAGD,mBAASc,EAAU1B,iBAIlC2B,OAAQ,SAACH,GACP,IAAMI,EAAcJ,EACpBvB,GAAa,SAACwB,GACZ,IAAMI,EAA8B,CAAE7B,UAAW,IAOjD,OANA4B,EAAYhB,KAAKkB,SAAQ,SAACN,GACxBK,EAAa7B,UAAb,sBACK6B,EAAa7B,WADlB,CAEE,CAAEZ,KAAMoC,EAAEpC,KAAMC,SAAUmC,EAAEO,WAGzBF,OAKPhB,EAAc,uCAAG,WAAOmB,GAAP,SAAArB,EAAA,0DACjBqB,EAAEC,KADe,gCAEND,EACVC,OACAC,MAAK,SAACV,GACL,OAAOH,KAAKc,MAAMX,MAEnBY,OAAM,SAACC,GACNC,QAAQC,KAAKF,MARE,mFAAH,wDAYnB,IAEH,IAAMG,EAAY,OAAGxC,QAAH,IAAGA,OAAH,EAAGA,EAAWA,UAAUyC,KAAI,SAACjB,GAC7C,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAMkB,GAAG,OAAT,mBACA,cAAC,EAAD,CAActD,KAAMoC,EAAEpC,KAAMC,SAAUmC,EAAEnC,WAAa,UAK3D,OACE,mCACE,cAAC,IAAD,CAAOsD,UAAU,WAAWC,MAAO,CAAEC,MAAO,QAA5C,SACGL,O,8DCMMM,EAnFW,WACxB,IAAIxC,EACJJ,qBAAU,WACR,IAAMC,EAAMC,OAAOC,UACnBC,EAAK,IAAIC,UAAJ,eAAsBJ,EAAIK,SAA1B,WACFC,UAAH,uCAAe,WAAOC,GAAP,mBAAAC,EAAA,6DACPC,EAAaF,EAAIE,KADV,SAEUC,EAAeD,GAFzB,UAEPE,EAFO,yDAMPC,EAAMC,EAAmBF,EAAEG,UAC3BF,EAAGD,GAPI,2CAAf,sDASA,IAAME,EAAa,CACjBO,UAAW,SAACC,KACZG,OAAQ,SAACH,MAGLX,EAAc,uCAAG,WAAOmB,GAAP,SAAArB,EAAA,0DACjBqB,EAAEC,KADe,gCAEND,EACVC,OACAC,MAAK,SAACV,GACL,OAAOH,KAAKc,MAAMX,MAEnBY,OAAM,SAACC,GACNC,QAAQC,KAAKF,MARE,mFAAH,wDAYnB,IAeH,OACE,cAAC,IAAD,CAAMjD,KAAK,kBAAkB2D,UAAU,cAAcC,SALtC,SAACxB,GAChBc,QAAQW,IAAI,4BAA6BzB,GAXtB,SAAUpC,EAAcC,GAC3C,IAAM6D,EAAuB,CAC3BjC,OAAQ,SACRL,KAAM,CACJxB,KAAMA,EACNC,SAAUA,IAGdiB,EAAGc,KAAKC,KAAKC,UAAU4B,IAIvBC,CAAa3B,EAAE4B,SAAU5B,EAAEnC,WAG3B,SACE,eAAC,IAAD,CAAOsD,UAAU,WAAWU,MAAM,SAAST,MAAO,CAAEC,MAAO,QAA3D,UACE,cAAC,IAAKS,KAAN,CACEV,MAAO,CAAEW,UAAW,QACpBnE,KAAK,WACLoE,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,gCAHrC,SAKE,cAAC,IAAD,CACEC,OAAQ,cAACC,EAAA,EAAD,CAAcb,UAAU,wBAChCc,YAAY,kBAGhB,cAAC,IAAKP,KAAN,CACElE,KAAK,WACLoE,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,gCAFrC,SAIE,cAAC,IAAD,CACEC,OAAQ,cAACG,EAAA,EAAD,CAAcf,UAAU,wBAChCc,YAAY,0BAIhB,cAAC,IAAKP,KAAN,UACE,cAAC,IAAD,CACES,KAAK,UACLC,SAAS,SACTjB,UAAU,oBAHZ,8C,SC5EFkB,EAAoBC,IAApBD,OAAQE,EAAYD,IAAZC,QAwBDC,MAtBf,WACE,OACE,qBAAKrB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,eAAC,IAAD,WACE,cAACkB,EAAD,IACA,cAACE,EAAD,UACE,cAAC,IAAD,CAAQE,SAAS,YAAjB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,OAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAIC,UAAWzE,mBCN5B0E,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fd17daec.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, Avatar } from \"antd\";\nimport { LikeOutlined, SettingOutlined } from \"@ant-design/icons\";\n\nconst { Meta } = Card;\n\nexport interface QuestionCardProps {\n  name?: string;\n  question?: string;\n}\n\nconst QuestionCard: React.FC<QuestionCardProps> = (props) => {\n  const { name, question } = props;\n  return (\n    <Card\n      bordered={true}\n      actions={[<SettingOutlined key=\"setting\" />, <LikeOutlined key=\"like\" />]}\n    >\n      <Meta\n        avatar={\n          <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n        }\n        title={name}\n        description={question}\n      />\n    </Card>\n  );\n};\n\nexport default QuestionCard;\n","import React, { useEffect, useState } from \"react\";\nimport QuestionCard, { QuestionCardProps } from \"./QuestionCard\";\nimport { Card, Space } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\nexport interface WsMsg {\n  action: string;\n  status: string;\n  msg: string;\n  data: any;\n  broadcast: boolean;\n}\n\ninterface QuestionProps {\n  questions: QuestionCardProps[];\n}\n\nconst Question: React.FC<{}> = () => {\n  const [questions, setQuestions] = useState<QuestionProps>();\n\n  useEffect(() => {\n    const url = window.location;\n    const ws = new WebSocket(`ws://${url.hostname}:8081`);\n    ws.onmessage = async (evt) => {\n      const data: Blob = evt.data;\n      const d: WsMsg = await handleBlobData(data);\n      if (!d) {\n        return;\n      }\n      const fn = (actionList as any)[d.action];\n      fn && fn(d);\n    };\n    ws.onopen = function (evt) {\n      const pullQuestionReq = {\n        action: \"getall\",\n      };\n      this.send(JSON.stringify(pullQuestionReq));\n    };\n    const actionList = {\n      broadcast: (v: WsMsg) => {\n        setQuestions((state) => {\n          const q = v.data as QuestionCardProps;\n          const prevState = state as QuestionProps;\n          return {\n            questions: [q, ...prevState.questions],\n          };\n        });\n      },\n      getall: (v: WsMsg) => {\n        const questionArr = v as { data: { name: string; desc: string }[] };\n        setQuestions((state) => {\n          const newQuestions: QuestionProps = { questions: [] };\n          questionArr.data.forEach((v) => {\n            newQuestions.questions = [\n              ...newQuestions.questions,\n              { name: v.name, question: v.desc },\n            ];\n          });\n          return newQuestions;\n        });\n      },\n    };\n\n    const handleBlobData = async (b: Blob) => {\n      if (b.text) {\n        return await b\n          .text()\n          .then((v) => {\n            return JSON.parse(v);\n          })\n          .catch((r) => {\n            console.warn(r);\n          });\n      }\n    };\n  }, []);\n\n  const questionCard = questions?.questions.map((v) => {\n    return (\n      <Card>\n        <Link to=\"/ask\">sdasd</Link>\n        <QuestionCard name={v.name} question={v.question} />{\" \"}\n      </Card>\n    );\n  });\n\n  return (\n    <>\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        {questionCard}\n      </Space>\n    </>\n  );\n};\n\nexport default Question;\n","import React, { useEffect, useState } from \"react\";\nimport { Space } from \"antd\";\nimport { Form, Input, Button } from \"antd\";\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\nimport { WsMsg } from \"../question/Question\";\n\n//{\"action\":\"create\", \"data\" : {\"name\":\"wangjie054\", \"question\":\"这个怎\"}}\ninterface SubmitMsg {\n  action: string;\n  data: { name: string; question: string };\n}\n\nconst Ask: React.FC<{}> = () => {\n  let ws: WebSocket;\n  useEffect(() => {\n    const url = window.location;\n    ws = new WebSocket(`ws://${url.hostname}:8081`);\n    ws.onmessage = async (evt) => {\n      const data: Blob = evt.data;\n      const d: WsMsg = await handleBlobData(data);\n      if (!d) {\n        return;\n      }\n      const fn = (actionList as any)[d.action];\n      fn && fn(d);\n    };\n    const actionList = {\n      broadcast: (v: WsMsg) => {},\n      getall: (v: WsMsg) => {},\n    };\n\n    const handleBlobData = async (b: Blob) => {\n      if (b.text) {\n        return await b\n          .text()\n          .then((v) => {\n            return JSON.parse(v);\n          })\n          .catch((r) => {\n            console.warn(r);\n          });\n      }\n    };\n  }, []);\n  const handleSubmit = function (name: string, question: string) {\n    const createReq: SubmitMsg = {\n      action: \"create\",\n      data: {\n        name: name,\n        question: question,\n      },\n    };\n    ws.send(JSON.stringify(createReq));\n  };\n  const onFinish = (v: any) => {\n    console.log(\"Received values of form: \", v);\n    handleSubmit(v.username, v.question);\n  };\n  return (\n    <Form name=\"normal_question\" className=\"submit-form\" onFinish={onFinish}>\n      <Space direction=\"vertical\" align=\"center\" style={{ width: \"100%\" }}>\n        <Form.Item\n          style={{ marginTop: \"40px\" }}\n          name=\"username\"\n          rules={[{ required: true, message: \"Please input your Username!\" }]}\n        >\n          <Input\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"Who are you\"\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"question\"\n          rules={[{ required: true, message: \"Please input your Question!\" }]}\n        >\n          <Input\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"enter your question\"\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            className=\"login-form-button\"\n          >\n            提交问题\n          </Button>\n        </Form.Item>\n      </Space>\n    </Form>\n  );\n};\n\nexport default Ask;\n","import React from \"react\";\nimport Question from \"./question/Question\";\nimport \"antd/dist/antd.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Ask from \"./ask/Ask\";\nimport { Layout } from \"antd\";\nconst { Header, Content } = Layout;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Layout>\n          <Header></Header>\n          <Content>\n            <Router basename=\"/question\">\n              <Switch>\n                <Route path=\"/ask\">\n                  <Ask />\n                </Route>\n                <Route path=\"/\" component={Question} />\n              </Switch>\n            </Router>\n          </Content>\n        </Layout>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
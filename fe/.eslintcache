[{"/Users/zhangruobin/ZRB-DATA/space/project/go/show/fe/src/index.tsx":"1","/Users/zhangruobin/ZRB-DATA/space/project/go/show/fe/src/reportWebVitals.ts":"2","/Users/zhangruobin/ZRB-DATA/space/project/go/show/fe/src/App.tsx":"3","/Users/zhangruobin/ZRB-DATA/space/project/go/show/fe/src/ask/Ask.tsx":"4","/Users/zhangruobin/ZRB-DATA/space/project/go/show/fe/src/question/Question.tsx":"5","/Users/zhangruobin/ZRB-DATA/space/project/go/show/fe/src/question/QuestionCard.tsx":"6"},{"size":500,"mtime":1610592733312,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1610592733313,"results":"9","hashOfConfig":"8"},{"size":777,"mtime":1610818865963,"results":"10","hashOfConfig":"8"},{"size":2623,"mtime":1610592733312,"results":"11","hashOfConfig":"8"},{"size":3745,"mtime":1610819232644,"results":"12","hashOfConfig":"8"},{"size":983,"mtime":1610642346575,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1etafy0",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/Users/zhangruobin/ZRB-DATA/space/project/go/show/fe/src/index.tsx",[],["30","31"],"/Users/zhangruobin/ZRB-DATA/space/project/go/show/fe/src/reportWebVitals.ts",[],"/Users/zhangruobin/ZRB-DATA/space/project/go/show/fe/src/App.tsx",[],"/Users/zhangruobin/ZRB-DATA/space/project/go/show/fe/src/ask/Ask.tsx",["32","33"],"import React, { useEffect, useState } from \"react\";\nimport { Space } from \"antd\";\nimport { Form, Input, Button } from \"antd\";\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\nimport { WsMsg } from \"../question/Question\";\n\n//{\"action\":\"create\", \"data\" : {\"name\":\"wangjie054\", \"question\":\"这个怎\"}}\ninterface SubmitMsg {\n  action: string;\n  data: { name: string; question: string };\n}\n\nconst Ask: React.FC<{}> = () => {\n  let ws: WebSocket;\n  useEffect(() => {\n    const url = window.location;\n    ws = new WebSocket(`ws://${url.hostname}:8081`);\n    ws.onmessage = async (evt) => {\n      const data: Blob = evt.data;\n      const d: WsMsg = await handleBlobData(data);\n      if (!d) {\n        return;\n      }\n      const fn = (actionList as any)[d.action];\n      fn && fn(d);\n    };\n    const actionList = {\n      broadcast: (v: WsMsg) => {},\n      getall: (v: WsMsg) => {},\n    };\n\n    const handleBlobData = async (b: Blob) => {\n      if (b.text) {\n        return await b\n          .text()\n          .then((v) => {\n            return JSON.parse(v);\n          })\n          .catch((r) => {\n            console.warn(r);\n          });\n      }\n    };\n  }, []);\n  const handleSubmit = function (name: string, question: string) {\n    const createReq: SubmitMsg = {\n      action: \"create\",\n      data: {\n        name: name,\n        question: question,\n      },\n    };\n    ws.send(JSON.stringify(createReq));\n  };\n  const onFinish = (v: any) => {\n    console.log(\"Received values of form: \", v);\n    handleSubmit(v.username, v.question);\n  };\n  return (\n    <Form name=\"normal_question\" className=\"submit-form\" onFinish={onFinish}>\n      <Space direction=\"vertical\" align=\"center\" style={{ width: \"100%\" }}>\n        <Form.Item\n          style={{ marginTop: \"40px\" }}\n          name=\"username\"\n          rules={[{ required: true, message: \"Please input your Username!\" }]}\n        >\n          <Input\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"Who are you\"\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"question\"\n          rules={[{ required: true, message: \"Please input your Question!\" }]}\n        >\n          <Input\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"enter your question\"\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            className=\"login-form-button\"\n          >\n            提交问题\n          </Button>\n        </Form.Item>\n      </Space>\n    </Form>\n  );\n};\n\nexport default Ask;\n","/Users/zhangruobin/ZRB-DATA/space/project/go/show/fe/src/question/Question.tsx",["34"],"import React, { useEffect, useState } from \"react\";\nimport QuestionCard, { QuestionCardProps } from \"./QuestionCard\";\nimport { Card, Space, Button } from \"antd\";\nimport {\n  UpOutlined,\n  DownOutlined,\n  LeftOutlined,\n  RightOutlined,\n} from \"@ant-design/icons\";\n\nexport interface WsMsg {\n  action: string;\n  status: string;\n  msg: string;\n  data: any;\n  broadcast: boolean;\n}\n\ninterface QuestionProps {\n  questions: QuestionCardProps[];\n}\n\nconst control = (action: string, ws: WebSocket) => {\n  const actionMsg = {\n    action: \"control\",\n    data: {\n      control: action,\n    },\n  };\n  if (ws.readyState !== ws.OPEN) {\n    return;\n  }\n  ws.send(JSON.stringify(actionMsg));\n};\n\nconst Question: React.FC<{}> = () => {\n  const url = window.location;\n  const ws = new WebSocket(`ws://${url.hostname}:8081`);\n  const [questions, setQuestions] = useState<QuestionProps>();\n\n  function showQuestion(name: string, question: string) {\n    const showReq = {\n      action: \"show\",\n      data: {\n        name: name,\n        question: question,\n      },\n    };\n    if (ws.readyState !== ws.OPEN) {\n      return;\n    }\n    ws.send(JSON.stringify(showReq));\n  }\n\n  useEffect(() => {\n    ws.onmessage = async (evt) => {\n      const data: Blob = evt.data;\n      const d: WsMsg = await handleBlobData(data);\n      if (!d) {\n        return;\n      }\n      const fn = (actionList as any)[d.action];\n      fn && fn(d);\n    };\n    ws.onopen = function (evt) {\n      const pullQuestionReq = {\n        action: \"getall\",\n      };\n      this.send(JSON.stringify(pullQuestionReq));\n    };\n    const actionList = {\n      broadcast: (v: WsMsg) => {\n        setQuestions((state) => {\n          const q = v.data as QuestionCardProps;\n          const prevState = state as QuestionProps;\n          return {\n            questions: [q, ...prevState.questions],\n          };\n        });\n      },\n      getall: (v: WsMsg) => {\n        const questionArr = v as { data: { name: string; desc: string }[] };\n        setQuestions((state) => {\n          const newQuestions: QuestionProps = { questions: [] };\n          questionArr.data.forEach((v) => {\n            newQuestions.questions = [\n              ...newQuestions.questions,\n              { name: v.name, question: v.desc },\n            ];\n          });\n          return newQuestions;\n        });\n      },\n    };\n\n    const handleBlobData = async (b: Blob) => {\n      if (b.text) {\n        return await b\n          .text()\n          .then((v) => {\n            return JSON.parse(v);\n          })\n          .catch((r) => {\n            console.warn(r);\n          });\n      }\n    };\n  }, []);\n\n  const questionCard = questions?.questions.map((v) => {\n    return (\n      <>\n        <Card>\n          <QuestionCard\n            name={v.name}\n            question={v.question}\n            onShow={showQuestion}\n          />{\" \"}\n        </Card>\n      </>\n    );\n  });\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        shape=\"circle\"\n        icon={<UpOutlined />}\n        onClick={() => {\n          control(\"p_up\", ws);\n        }}\n      ></Button>\n      <Button\n        type=\"primary\"\n        shape=\"circle\"\n        icon={<DownOutlined />}\n        onClick={() => {\n          control(\"p_down\", ws);\n        }}\n      ></Button>\n      <Button\n        type=\"primary\"\n        shape=\"circle\"\n        icon={<LeftOutlined />}\n        onClick={() => {\n          control(\"p_left\", ws);\n        }}\n      ></Button>\n      <Button\n        type=\"primary\"\n        shape=\"circle\"\n        icon={<RightOutlined />}\n        onClick={() => {\n          control(\"p_right\", ws);\n        }}\n      ></Button>\n\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        {questionCard}\n      </Space>\n    </>\n  );\n};\n\nexport default Question;\n","/Users/zhangruobin/ZRB-DATA/space/project/go/show/fe/src/question/QuestionCard.tsx",[],["35","36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":1,"column":28,"nodeType":"43","messageId":"44","endLine":1,"endColumn":36},{"ruleId":"45","severity":1,"message":"46","line":17,"column":10,"nodeType":"47","endLine":17,"endColumn":52},{"ruleId":"45","severity":1,"message":"48","line":108,"column":6,"nodeType":"49","endLine":108,"endColumn":8,"suggestions":"50"},{"ruleId":"37","replacedBy":"51"},{"ruleId":"39","replacedBy":"52"},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'ws' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","React Hook useEffect has a missing dependency: 'ws'. Either include it or remove the dependency array.","ArrayExpression",["55"],["53"],["54"],"no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},"Update the dependencies array to be: [ws]",{"range":"58","text":"59"},[2599,2601],"[ws]"]
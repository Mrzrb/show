{"version":3,"sources":["question/QuestionCard.tsx","question/Question.tsx","ask/Ask.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Meta","Card","QuestionCard","props","name","question","onShow","bordered","actions","SettingOutlined","LikeOutlined","onClick","type","shape","icon","avatar","src","title","description","control","action","ws","actionMsg","data","readyState","OPEN","send","JSON","stringify","Question","url","window","location","WebSocket","hostname","useState","questions","setQuestions","showQuestion","showReq","useEffect","onmessage","evt","a","handleBlobData","d","fn","actionList","onopen","this","broadcast","v","state","prevState","getall","questionArr","newQuestions","forEach","desc","b","text","then","parse","catch","r","console","warn","questionCard","map","UpOutlined","DownOutlined","LeftOutlined","RightOutlined","direction","style","width","Ask","className","onFinish","log","createReq","handleSubmit","username","align","Item","marginTop","rules","required","message","prefix","UserOutlined","placeholder","LockOutlined","htmlType","Header","Layout","Content","App","basename","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAIQA,EAASC,IAATD,KAqCOE,EA7BmC,SAACC,GAAW,IACpDC,EAA2BD,EAA3BC,KAAMC,EAAqBF,EAArBE,SAAUC,EAAWH,EAAXG,OACxB,OACE,cAAC,IAAD,CACEC,UAAU,EACVC,QAAS,CACP,cAACC,EAAA,EAAD,GAAqB,WACrB,cAACC,EAAA,EAAD,CAAyBC,QAASL,EAAOF,EAAMC,IAA7B,QAClB,cAAC,IAAD,CACEO,KAAK,UACLC,MAAM,SACNC,KAAM,cAACJ,EAAA,EAAD,IACNC,QAAS,WACPL,EAAOF,EAAMC,OAVrB,SAeE,cAACL,EAAD,CACEe,OACE,cAAC,IAAD,CAAQC,IAAI,qEAEdC,MAAOb,EACPc,YAAab,O,2CCbfc,EAAU,SAACC,EAAgBC,GAC/B,IAAMC,EAAY,CAChBF,OAAQ,UACRG,KAAM,CACJJ,QAASC,IAGTC,EAAGG,aAAeH,EAAGI,MAGzBJ,EAAGK,KAAKC,KAAKC,UAAUN,KAqIVO,EAlIgB,WAC7B,IAAMC,EAAMC,OAAOC,SACbX,EAAK,IAAIY,UAAJ,eAAsBH,EAAII,SAA1B,UAFwB,EAGDC,qBAHC,mBAG5BC,EAH4B,KAGjBC,EAHiB,KAKnC,SAASC,EAAalC,EAAcC,GAClC,IAAMkC,EAAU,CACdnB,OAAQ,OACRG,KAAM,CACJnB,KAAMA,EACNC,SAAUA,IAGVgB,EAAGG,aAAeH,EAAGI,MAGzBJ,EAAGK,KAAKC,KAAKC,UAAUW,IAGzBC,qBAAU,WACRnB,EAAGoB,UAAH,uCAAe,WAAOC,GAAP,mBAAAC,EAAA,6DACPpB,EAAamB,EAAInB,KADV,SAEUqB,EAAerB,GAFzB,UAEPsB,EAFO,yDAMPC,EAAMC,EAAmBF,EAAEzB,UAC3B0B,EAAGD,GAPI,2CAAf,sDASAxB,EAAG2B,OAAS,SAAUN,GAIpBO,KAAKvB,KAAKC,KAAKC,UAHS,CACtBR,OAAQ,aAIZ,IAAM2B,EAAa,CACjBG,UAAW,SAACC,GACVd,GAAa,SAACe,GACZ,IACMC,EAAYD,EAClB,MAAO,CACLhB,UAAU,CAHFe,EAAE5B,MAGD,mBAAS8B,EAAUjB,iBAIlCkB,OAAQ,SAACH,GACP,IAAMI,EAAcJ,EACpBd,GAAa,SAACe,GACZ,IAAMI,EAA8B,CAAEpB,UAAW,IAOjD,OANAmB,EAAYhC,KAAKkC,SAAQ,SAACN,GACxBK,EAAapB,UAAb,sBACKoB,EAAapB,WADlB,CAEE,CAAEhC,KAAM+C,EAAE/C,KAAMC,SAAU8C,EAAEO,WAGzBF,OAKPZ,EAAc,uCAAG,WAAOe,GAAP,SAAAhB,EAAA,0DACjBgB,EAAEC,KADe,gCAEND,EACVC,OACAC,MAAK,SAACV,GACL,OAAOxB,KAAKmC,MAAMX,MAEnBY,OAAM,SAACC,GACNC,QAAQC,KAAKF,MARE,mFAAH,wDAYnB,IAEH,IAAMG,EAAY,OAAG/B,QAAH,IAAGA,OAAH,EAAGA,EAAWA,UAAUgC,KAAI,SAACjB,GAC7C,OACE,mCACE,eAAC,IAAD,WACE,cAAC,EAAD,CACE/C,KAAM+C,EAAE/C,KACRC,SAAU8C,EAAE9C,SACZC,OAAQgC,IACP,YAMX,OACE,qCACE,cAAC,IAAD,CACE1B,KAAK,UACLC,MAAM,SACNC,KAAM,cAACuD,EAAA,EAAD,IACN1D,QAAS,WACPQ,EAAQ,OAAQE,MAGpB,cAAC,IAAD,CACET,KAAK,UACLC,MAAM,SACNC,KAAM,cAACwD,EAAA,EAAD,IACN3D,QAAS,WACPQ,EAAQ,SAAUE,MAGtB,cAAC,IAAD,CACET,KAAK,UACLC,MAAM,SACNC,KAAM,cAACyD,EAAA,EAAD,IACN5D,QAAS,WACPQ,EAAQ,SAAUE,MAGtB,cAAC,IAAD,CACET,KAAK,UACLC,MAAM,SACNC,KAAM,cAAC0D,EAAA,EAAD,IACN7D,QAAS,WACPQ,EAAQ,UAAWE,MAIvB,cAAC,IAAD,CAAOoD,UAAU,WAAWC,MAAO,CAAEC,MAAO,QAA5C,SACGR,Q,8DChEMS,EAnFW,WACxB,IAAIvD,EACJmB,qBAAU,WACR,IAAMV,EAAMC,OAAOC,UACnBX,EAAK,IAAIY,UAAJ,eAAsBH,EAAII,SAA1B,WACFO,UAAH,uCAAe,WAAOC,GAAP,mBAAAC,EAAA,6DACPpB,EAAamB,EAAInB,KADV,SAEUqB,EAAerB,GAFzB,UAEPsB,EAFO,yDAMPC,EAAMC,EAAmBF,EAAEzB,UAC3B0B,EAAGD,GAPI,2CAAf,sDASA,IAAME,EAAa,CACjBG,UAAW,SAACC,KACZG,OAAQ,SAACH,MAGLP,EAAc,uCAAG,WAAOe,GAAP,SAAAhB,EAAA,0DACjBgB,EAAEC,KADe,gCAEND,EACVC,OACAC,MAAK,SAACV,GACL,OAAOxB,KAAKmC,MAAMX,MAEnBY,OAAM,SAACC,GACNC,QAAQC,KAAKF,MARE,mFAAH,wDAYnB,IAeH,OACE,cAAC,IAAD,CAAM5D,KAAK,kBAAkByE,UAAU,cAAcC,SALtC,SAAC3B,GAChBc,QAAQc,IAAI,4BAA6B5B,GAXtB,SAAU/C,EAAcC,GAC3C,IAAM2E,EAAuB,CAC3B5D,OAAQ,SACRG,KAAM,CACJnB,KAAMA,EACNC,SAAUA,IAGdgB,EAAGK,KAAKC,KAAKC,UAAUoD,IAIvBC,CAAa9B,EAAE+B,SAAU/B,EAAE9C,WAG3B,SACE,eAAC,IAAD,CAAOoE,UAAU,WAAWU,MAAM,SAAST,MAAO,CAAEC,MAAO,QAA3D,UACE,cAAC,IAAKS,KAAN,CACEV,MAAO,CAAEW,UAAW,QACpBjF,KAAK,WACLkF,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,gCAHrC,SAKE,cAAC,IAAD,CACEC,OAAQ,cAACC,EAAA,EAAD,CAAcb,UAAU,wBAChCc,YAAY,kBAGhB,cAAC,IAAKP,KAAN,CACEhF,KAAK,WACLkF,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,gCAFrC,SAIE,cAAC,IAAD,CACEC,OAAQ,cAACG,EAAA,EAAD,CAAcf,UAAU,wBAChCc,YAAY,0BAIhB,cAAC,IAAKP,KAAN,UACE,cAAC,IAAD,CACExE,KAAK,UACLiF,SAAS,SACThB,UAAU,oBAHZ,8C,SC5EFiB,EAAoBC,IAApBD,OAAQE,EAAYD,IAAZC,QAwBDC,MAtBf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,eAAC,IAAD,WACE,cAACiB,EAAD,IACA,cAACE,EAAD,UACE,cAAC,IAAD,CAAQE,SAAS,YAAjB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,OAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAIC,UAAWvE,mBCN5BwE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.92ee099d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, Avatar, Button } from \"antd\";\nimport { LikeOutlined, SettingOutlined } from \"@ant-design/icons\";\n\nconst { Meta } = Card;\n\nexport interface QuestionCardProps {\n  name?: string;\n  question?: string;\n  onShow?: any;\n}\n\nconst QuestionCard: React.FC<QuestionCardProps> = (props) => {\n  const { name, question, onShow } = props;\n  return (\n    <Card\n      bordered={true}\n      actions={[\n        <SettingOutlined key=\"setting\" />,\n        <LikeOutlined key=\"like\" onClick={onShow(name, question)} />,\n        <Button\n          type=\"primary\"\n          shape=\"circle\"\n          icon={<LikeOutlined />}\n          onClick={() => {\n            onShow(name, question);\n          }}\n        />,\n      ]}\n    >\n      <Meta\n        avatar={\n          <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n        }\n        title={name}\n        description={question}\n      />\n    </Card>\n  );\n};\n\nexport default QuestionCard;\n","import React, { useEffect, useState } from \"react\";\nimport QuestionCard, { QuestionCardProps } from \"./QuestionCard\";\nimport { Card, Space, Button } from \"antd\";\nimport {\n  UpOutlined,\n  DownOutlined,\n  LeftOutlined,\n  RightOutlined,\n} from \"@ant-design/icons\";\n\nexport interface WsMsg {\n  action: string;\n  status: string;\n  msg: string;\n  data: any;\n  broadcast: boolean;\n}\n\ninterface QuestionProps {\n  questions: QuestionCardProps[];\n}\n\nconst control = (action: string, ws: WebSocket) => {\n  const actionMsg = {\n    action: \"control\",\n    data: {\n      control: action,\n    },\n  };\n  if (ws.readyState !== ws.OPEN) {\n    return;\n  }\n  ws.send(JSON.stringify(actionMsg));\n};\n\nconst Question: React.FC<{}> = () => {\n  const url = window.location;\n  const ws = new WebSocket(`ws://${url.hostname}:8081`);\n  const [questions, setQuestions] = useState<QuestionProps>();\n\n  function showQuestion(name: string, question: string) {\n    const showReq = {\n      action: \"show\",\n      data: {\n        name: name,\n        question: question,\n      },\n    };\n    if (ws.readyState !== ws.OPEN) {\n      return;\n    }\n    ws.send(JSON.stringify(showReq));\n  }\n\n  useEffect(() => {\n    ws.onmessage = async (evt) => {\n      const data: Blob = evt.data;\n      const d: WsMsg = await handleBlobData(data);\n      if (!d) {\n        return;\n      }\n      const fn = (actionList as any)[d.action];\n      fn && fn(d);\n    };\n    ws.onopen = function (evt) {\n      const pullQuestionReq = {\n        action: \"getall\",\n      };\n      this.send(JSON.stringify(pullQuestionReq));\n    };\n    const actionList = {\n      broadcast: (v: WsMsg) => {\n        setQuestions((state) => {\n          const q = v.data as QuestionCardProps;\n          const prevState = state as QuestionProps;\n          return {\n            questions: [q, ...prevState.questions],\n          };\n        });\n      },\n      getall: (v: WsMsg) => {\n        const questionArr = v as { data: { name: string; desc: string }[] };\n        setQuestions((state) => {\n          const newQuestions: QuestionProps = { questions: [] };\n          questionArr.data.forEach((v) => {\n            newQuestions.questions = [\n              ...newQuestions.questions,\n              { name: v.name, question: v.desc },\n            ];\n          });\n          return newQuestions;\n        });\n      },\n    };\n\n    const handleBlobData = async (b: Blob) => {\n      if (b.text) {\n        return await b\n          .text()\n          .then((v) => {\n            return JSON.parse(v);\n          })\n          .catch((r) => {\n            console.warn(r);\n          });\n      }\n    };\n  }, []);\n\n  const questionCard = questions?.questions.map((v) => {\n    return (\n      <>\n        <Card>\n          <QuestionCard\n            name={v.name}\n            question={v.question}\n            onShow={showQuestion}\n          />{\" \"}\n        </Card>\n      </>\n    );\n  });\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        shape=\"circle\"\n        icon={<UpOutlined />}\n        onClick={() => {\n          control(\"p_up\", ws);\n        }}\n      ></Button>\n      <Button\n        type=\"primary\"\n        shape=\"circle\"\n        icon={<DownOutlined />}\n        onClick={() => {\n          control(\"p_down\", ws);\n        }}\n      ></Button>\n      <Button\n        type=\"primary\"\n        shape=\"circle\"\n        icon={<LeftOutlined />}\n        onClick={() => {\n          control(\"p_left\", ws);\n        }}\n      ></Button>\n      <Button\n        type=\"primary\"\n        shape=\"circle\"\n        icon={<RightOutlined />}\n        onClick={() => {\n          control(\"p_right\", ws);\n        }}\n      ></Button>\n\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        {questionCard}\n      </Space>\n    </>\n  );\n};\n\nexport default Question;\n","import React, { useEffect, useState } from \"react\";\nimport { Space } from \"antd\";\nimport { Form, Input, Button } from \"antd\";\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\nimport { WsMsg } from \"../question/Question\";\n\n//{\"action\":\"create\", \"data\" : {\"name\":\"wangjie054\", \"question\":\"这个怎\"}}\ninterface SubmitMsg {\n  action: string;\n  data: { name: string; question: string };\n}\n\nconst Ask: React.FC<{}> = () => {\n  let ws: WebSocket;\n  useEffect(() => {\n    const url = window.location;\n    ws = new WebSocket(`ws://${url.hostname}:8081`);\n    ws.onmessage = async (evt) => {\n      const data: Blob = evt.data;\n      const d: WsMsg = await handleBlobData(data);\n      if (!d) {\n        return;\n      }\n      const fn = (actionList as any)[d.action];\n      fn && fn(d);\n    };\n    const actionList = {\n      broadcast: (v: WsMsg) => {},\n      getall: (v: WsMsg) => {},\n    };\n\n    const handleBlobData = async (b: Blob) => {\n      if (b.text) {\n        return await b\n          .text()\n          .then((v) => {\n            return JSON.parse(v);\n          })\n          .catch((r) => {\n            console.warn(r);\n          });\n      }\n    };\n  }, []);\n  const handleSubmit = function (name: string, question: string) {\n    const createReq: SubmitMsg = {\n      action: \"create\",\n      data: {\n        name: name,\n        question: question,\n      },\n    };\n    ws.send(JSON.stringify(createReq));\n  };\n  const onFinish = (v: any) => {\n    console.log(\"Received values of form: \", v);\n    handleSubmit(v.username, v.question);\n  };\n  return (\n    <Form name=\"normal_question\" className=\"submit-form\" onFinish={onFinish}>\n      <Space direction=\"vertical\" align=\"center\" style={{ width: \"100%\" }}>\n        <Form.Item\n          style={{ marginTop: \"40px\" }}\n          name=\"username\"\n          rules={[{ required: true, message: \"Please input your Username!\" }]}\n        >\n          <Input\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"Who are you\"\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"question\"\n          rules={[{ required: true, message: \"Please input your Question!\" }]}\n        >\n          <Input\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"enter your question\"\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            className=\"login-form-button\"\n          >\n            提交问题\n          </Button>\n        </Form.Item>\n      </Space>\n    </Form>\n  );\n};\n\nexport default Ask;\n","import React from \"react\";\nimport Question from \"./question/Question\";\nimport \"antd/dist/antd.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Ask from \"./ask/Ask\";\nimport { Layout } from \"antd\";\nconst { Header, Content } = Layout;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Layout>\n          <Header></Header>\n          <Content>\n            <Router basename=\"/question\">\n              <Switch>\n                <Route path=\"/ask\">\n                  <Ask />\n                </Route>\n                <Route path=\"/\" component={Question} />\n              </Switch>\n            </Router>\n          </Content>\n        </Layout>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}